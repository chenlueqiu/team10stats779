0.3/0.41
c(0.3, 0.05, 0.06) / 0.41
r <- c(0.3, 0.05, 0.06) / 0.41
sum(r)
1-0.73171
0.3/0.36
x<-seq(0, 1, length = 100)
plot(x, dbeta(x, 1, 1), type = "l")
plot(x, dbeta(x, 1, 1, log = TRUE), type = "l")
plot(x, dbeta(x, 0 + 1, 10 + 1), type = "l")
plot(x, dbeta(x, 0 + 1, 10 + 1), type = "l",
title = 'The posterior pdf of Theta')
plot(x, dbeta(x, 0 + 1, 10 + 1), type = "l",
main = 'The posterior pdf of Theta')
x<-seq(0, 1, length = 1000)
plot(x, dbeta(x, 0 + 1, 10 + 1), type = "l",
main = 'The posterior pdf of Theta')
qbeta(0.95, 1, 11)
qbeta(c(0, 0.95), 1, 11)
qbeta(c(0.03, 0.2), 3, 27)
pbeta(c(0.03, 0.2), 3, 27)
3/40
1/12
x<-seq(0, 1, length = 1000)
plot(x, dbeta(x, 1, 1), type = "l")
plot(x, dbeta(x, 3, 37), type = "l")
d1 <- density(rnorm(100))
d2 <- density(rnorm(100))
plot(range(d1$x, d2$x), range(d1$y, d2$y), type = "n", xlab = "x",
ylab = "Density")
lines(d1, col = "red")
lines(d2, col = "blue")
d1
d1$x
plot(x,y1,type="l",col="red")
lines(x,y2,col="green")
x <- seq(0, 1, length = 100)
y_prior <- dbeta(x, 3, 27)
plot(x, y1, type = "l")
plot(x, y_prior, type = "l")
plot(x, y_prior, type = "h")
plot(x, y_prior, type = "l", lty = 1)
plot(x, y_prior, type = "l", lty = 2)
lines(x, y_posterior, lty = 1)
y_posterior <- dbeta(x, 3, 37)
lines(x, y_posterior, lty = 1)
plot(x, y_posterior, type = "l", lty = 2)
lines(x, y_prior, lty = 1)
y_normlkh <- dbeta(x, 1, 11)
lines(x, y_normlkh, lty = 3)
y_normlkh
plot(x, y_posterior, type = "l", lty = 1)
lines(x, y_prior, lty = 2)
lines(x, y_normlkh, lty = 3)
plot(x, y_posterior, type = "l", lty = 1, ylab = "density")
lines(x, y_prior, lty = 2)
lines(x, y_normlkh, lty = 3)
max_y
legend(1, max_y, c('prior', 'posterior', 'likelihood'), lty=1:3)
legend(1, 1, c('prior', 'posterior', 'likelihood'), lty=1:3)
legend(0.5, 0.5, c('prior', 'posterior', 'likelihood'), lty=1:3)
legend(0.5, 8, c('prior', 'posterior', 'likelihood'), lty=1:3)
legend(0.7, 10, c('prior', 'posterior', 'likelihood'), lty=1:3)
plot(x, y_posterior, type = "l", lty = 1, ylab = "density")
lines(x, y_prior, lty = 2)
lines(x, y_normlkh, lty = 3)
legend(0.7, 10, c('prior', 'posterior', 'likelihood'), lty=1:3)
plot(x, y_posterior, type = "l", lty = 1, ylab = "density")
lines(x, y_prior, lty = 2)
lines(x, y_normlkh, lty = 3)
legend(0.7, 10, c('posterior', 'prior', 'likelihood'), lty=1:3)
plot(x, y_posterior, type = "l", lty = 1,
ylab = "density", xlab = "theta")
lines(x, y_prior, lty = 2)
lines(x, y_normlkh, lty = 3)
legend(0.7, 10, c('posterior', 'prior', 'likelihood'), lty=1:3)
x <- seq(0, 1, length = 1000)
y_prior <- dbeta(x, 3, 27)
y_posterior <- dbeta(x, 3, 37)
y_normlkh <- dbeta(x, 1, 11)
plot(x, y_posterior, type = "l", lty = 1,
ylab = "density", xlab = "theta")
lines(x, y_prior, lty = 2)
lines(x, y_normlkh, lty = 3)
legend(0.7, 10, c('posterior', 'prior', 'likelihood'), lty = 1 : 3)
plot(x, y_posterior, type = "l", lty = 1,
ylab = "density", xlab = "theta"，
main = "Prior, normalized likelihood, and posterior density of theta")
plot(x, y_posterior, type = "l", lty = 1,
ylab = "density", xlab = "theta"，
main = "Prior, normalized likelihood, and posterior density")
lines(x, y_prior, lty = 2)
lines(x, y_normlkh, lty = 3)
legend(0.7, 10, c('posterior', 'prior', 'likelihood'), lty = 1 : 3)
factorial(3)
factorial(1:50)
factorial(50)
factorial(50)-3.041409e+64
10*factorial(39)*factorial(2)*factorial(46)/factorial(2)/factorial(36)/factorial(49)
factorial(39)*factorial(2)*factorial(46)/factorial(2)/factorial(36)/factorial(49)
1-0.4960378
15.67+7.1+4.98+5.9+10.23+7+10.8+8.6
library('rjags')
BUGSmodel = "model
{
theta ~ dbeta(1, 1)
x ~ dbin(theta, n)
phi<- log(theta/(1-theta))
}
"
data = list(x=15, n=20)
inits = list(theta=0.8)
parameters = c('theta','phi')
burn_in = 1000
steps = 2000
thin = 4
thin = 1
seed = 42
foo <- jags.model(textConnection(BUGSmodel), data=data, inits=inits)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
out
summary(out)
out <- jags.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
out <- jags.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
par(mar = rep(2, 4)) #adjusts margin plotting parameters
plot(out)
str(out)
outmatrix <- as.matrix(out)
outframe <-as.data.frame(outmatrix)
head(outframe)
str(outframe)
data = list(x=c(10, 15), n=c(20,20))
foo <- jags.model(textConnection(BUGSmodel), data=data, inits=inits)
BUGSmodel = "model
{
theta ~ dbeta(1, 1)
x ~ dbin(theta, n)
phi<- log(theta/(1-theta))
}
"
data = list(x=c(10, 15), n=c(20,20))
data
inits = list(theta=0.8)
foo <- jags.model(textConnection(BUGSmodel), data=data, inits=inits)
BUGSmodel = "model
{
x ~ dexp(2)
y<-log(x)
tail<-step(y)
}
"
data = list(x=NA)
inits = list(x=0.5)
parameters = c('x','y','tail')
burn_in = 1000
steps = 10000
thin = 1
seed = 42
foo <- jags.model(textConnection(BUGSmodel),data=data, inits=inits)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
par(mar = rep(2, 4))
plot(out)
outmatrix <- as.matrix(out)
outframe <-as.data.frame(outmatrix)
library('rjags')
BUGSmodel = "model
{
theta ~ dbeta(3, 27)
x ~ dbin(theta, n)
}
"
data = list(x = 0, n = 10)
data = list(x = 0, n = 10)
inits = list(theta = 0.1)
parameters = c('theta')
burn_in = 1000
steps = 2000
thin = 1
seed = 42
foo <- jags.model(textConnection(BUGSmodel), data = data, inits = inits)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
plot(out)
BUGSmodel = "model
{
theta ~ dbeta(3, 27)
x ~ dbin(theta, n)
y ~ dbin(theta, 1)
}
"
data = list(x = 0, n = 10)
parameters = c('theta', y)
parameters = c('theta', 'y')
foo <- jags.model(textConnection(BUGSmodel), data = data, inits = inits)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
BUGSmodel = "model
{
theta ~ dbeta(3, 27)
x ~ dbin(theta, n)
y ~ dbin(theta, n)
}
"
foo <- jags.model(textConnection(BUGSmodel), data = data, inits = inits)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
plot(out)
par(mar = rep(2, 4)) #adjusts margin plotting parameters
plot(out)
update(foo, burn_in)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
BUGSmodel = "model
{
theta ~ dbeta(3, 27)
x ~ dbin(theta, n)
y ~ dbin(theta, m)
}
"
data = list(x = 0, n = 10, m = 10)
burn_in = 10000
steps = 20000
foo <- jags.model(textConnection(BUGSmodel), data = data, inits = inits)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
BUGSmodel = "model
{
theta ~ dbeta(3, 27)
x ~ dbin(theta, n)
y ~ dbin(theta, m)
tail <- step(y - 0.5)
}
"
parameters = c('theta', 'y', 'tail')
foo <- jags.model(textConnection(BUGSmodel), data = data, inits = inits)
update(foo, burn_in)
out <- coda.samples(model=foo, variable.names=parameters, n.iter=steps, thin=thin)
summary(out)
install.packages("Rcpp")
library(Rcpp)
cppFunction
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add
add
add(1, 2, 3)
add(1, 2)
runif(10)
matrix(c(1,2,3,4),2,2)
rowSums(matrix(c(1,2,3,4),2,2))
cppFunction('NumericVector rowSumsC(NumericMatrix x) {
int nrow = x.nrow(), ncol = x.ncol();
NumericVector out(nrow);
for (int i = 0; i < nrow; i++) {
double total = 0;
for (int j = 0; j < ncol; j++) {
total += x(i, j);
}
out[i] = total;
}
return out;
}')
x <- matrix(sample(100), 10)
rowSums(x)
rowSumsC(x)
sourceCpp("F:/StatsAuckland/stats779/Rcpp/cpp/ex1.cpp")
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
sourceCpp("F:/StatsAuckland/stats779/Rcpp/cpp/ex1.cpp")
sourceCpp("F:/StatsAuckland/stats779/Rcpp/cpp/ex1.cpp")
meanC(c(1, 2, 3))
meanC(c(9, 5, 3))
sourceCpp("F:/StatsAuckland/stats779/Rcpp/cpp/ex1.cpp")
attribs()
sourceCpp("F:/StatsAuckland/stats779/Rcpp/cpp/ex1.cpp")
pdistC2(3, c(1,2,3))
pdistC2(3, c(1,2,3,4,5))
rep_len(2, 5)
sourceCpp("F:/StatsAuckland/stats779/Rcpp/cpp/ex0.cpp")
Rcpp::sourceCpp('F:/StatsAuckland/stats779/Rcpp/cpp/ex0.cpp')
Rcpp::sourceCpp('F:/StatsAuckland/stats779/Rcpp/cpp/ex0.cpp')
setwd("F:/StatsAuckland/stats779/Rcpp")
setwd("F:/StatsAuckland/stats779/Rcpp")
setwd("F:/StatsAuckland/stats779/Rcpp/")
Rcpp.package.skeleton("team10stats799")
library(Rcpp)
Rcpp.package.skeleton("team10stats799")
rcpp_hello_world
install.packages('team10stats799')
library(team10stats799)
Rcpp.package.skeleton(name = "team10stats799",
author = "Lueqiu, Divya, Jan",
cpp_files = "F:\StatsAuckland\stats779\Rcpp\cpp",
example_code = FALSE)
Rcpp.package.skeleton(name = "team10stats799",
author = "Lueqiu, Divya, Jan",
cpp_files = "F:\StatsAuckland\stats779\Rcpp\cpp",
example_code = FALSE)
Rcpp.package.skeleton(name = "team10stats799",
author = "Lueqiu, Divya, Jan",
cpp_files = "F:/StatsAuckland/stats779/Rcpp/cpp",
example_code = FALSE)
#creating Rcpp package
Rcpp.package.skeleton(name = "team10stats799",
author = "Lueqiu, Divya, Jan",
cpp_files = "F:/StatsAuckland/stats779/Rcpp/cpp/kmr.cpp",
example_code = FALSE)
